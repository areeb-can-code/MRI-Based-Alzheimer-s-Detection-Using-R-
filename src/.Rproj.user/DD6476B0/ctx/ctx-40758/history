?mtcars
carOutput<- vector ("double", ncol(mtcars))
for (i in seq_along(mtcars)){
carOutput[[i]] <- median(mtcars[[i]])}
i
carOutput
#the map family in purr
car_medians <- map_dbl(mtcars, median)
car_medians
typeof(car_medians)
starwars
map_lgl(starwars, is_character) ## returns with dataset and shows wich ones are char vals
# and that's mapped as vectors with logical values
map_dbl(starwars, is_double)
# cahgne the default bahievior of function applied
map_dbl(mtcars, mean, trim = 0.2)
map_dbl(mtcars, ~round(mean(.x)))
# now trying to do a logical variant of the one above
map_lgl(mtcars , ~max(.x) > 3 *min(.x))
#find out the number of unique values in each var in STARWARS
map_int(starwars, ~length(unique(.x)))
## this gives back this
name     height       mass hair_color skin_color
87         46         39         13         31
eye_color birth_year     gender  homeworld    species
15         37          5         49         38
films   vehicles  starships
24         11         17
#splitting data
#split function
unique(mtcars$cyl)
mtcars%>%
split(.$cyl)  %>%
map(summary)
# splitting empty cars // map () always returns a list
mtcars %>%  ## makes sccatter plot
split(.$cyl) %>%
map(~ggplot(.,aes(mpg, wt)) + geom_point() +geom_smooth())
#predicates
str(iris)
?str
iris %>%
discard(is.factor) %>%
map_dbl(mean) %>% round(1)
## this gives back unique value with characte values as well
starwars %>%
keep(is.character) %>%
map_int( ~ length(unique(.x)))
# sometimes we want to keep eevyeritn gbut apply function on some
iris %>%
map_if(is.numeric, round) %>% ## only appliues to numeric vals
str()
# cumulative  yearly change in CO2 emissions
climate_cum <- climate_
libary(plotly)
install.packages("plotly")
library(plotly)
#################NEW VID#################
require(tidyr)
data("starwars")
starwars %>% ## and then
select(gender, mass, height, species) %>%
filter(species=="Human") %>%
na.omit() %>%
mutate(height = height/100) %>% ## this line changes it from centimeters
## to meters and puts that change into the dataset as well.
# only for htat data set you using
mutate(BMI=mass/height^2)%>%
group_by(gender) %>%
summarize(Average_BMI = mean(BMI))
# is there a didffer with gender bmi
print("you did it")
library(tidyr)
library(tidyverse)
##### Data Wrangling part 1######
# so this spots vars and obs w/in data
# quickly derive new vars and obs to explore
# to reshpae data in2 da layout that works best for R
# to join multiple data sets together
# and to use 'group-wise' summaries to explore
#hidden levels of information w/in ur data
# goes with tidyr and dplyr
## done in all notes lol
#####Practice with GGPlot now ####
glimpse(cars)
attach(starwars)
names(starwars)
# I'm learning guys
select(starwars, mass, name) %>% filter(mass>10) %>% arrange (desc(mass))
detach(starwars)
ggplot(diamonds, aes(carat, price)) +
facet_wrap(~color)
## Learning with a guy####
print("Filter is subsetting rows by vars")
print("Arrange is sort rows by vars")
print("Select is columns (vars)")
print("Mutate is change values")
print("Count is ---")
print("summarize is ==")
#### Hey I'm learning w/ Titenic####
library(dplyr)
library(tidyverse)
library(ggplot2)
library(readr)
titanic <- read.csv(file = "titanic.csv", stringsAsFactors = FALSE)
view(titanic)
## Setting up factors##
titanic$Pclass<- as.factor(titanic$Pclass)
titanic$Survived<- as.factor(titanic$Survived)
titanic$Sex <- as.factor(titanic$Sex)
titanic$Embarked <- as.factor(titanic$Embarked)
ggplot(titanic, aes(x=Survived)) +
geom_bar()
## Add some customization
ggplot(titanic, aes(x=Survived)) +
theme_bw() +
geom_bar() +
labs(y="Passenger Count", title = "Titanic Survival Rates")
## Add some hypothesis and survival rate for gender?
ggplot(titanic, aes(x=Sex, fill=Survived)) +
theme_bw() +
geom_bar() +
labs(y= "Passenger Count", title= "Titanic Survival Rates by Sex")
## Check if class had a motivation for survival rate
ggplot(titanic, aes(x=Pclass, fill=Survived)) +
theme_bw() +
geom_bar()+
labs(y="Passenger Count", title="Titanic Surival Rates by P class")
## facet Wrap
ggplot(titanic, aes(x=Sex, fill= Survived)) +
theme_bw() +
facet_wrap(~Pclass) +
geom_bar() +
labs (y = "Pass Count", title="Titanic Surv R8s Pclass & Sex")
### Making distribution of ages###
ggplot(titanic, aes(x=Age)) + theme_bw() +
geom_histogram(binwidth =1) +
labs(y="pass Count", x = "Age (binwidth 2)" , title="Titanic Age Distro")
##Dpylr Vids or More ##
library(dplyr)
flights%>%
group_by()
fl_airport %>%
filter(dest == 'TPA', month == 9)%>%
summarise(mean(arr_delay, na.rm = TRUE))
fl_airport <-  inner_join(fl_new, airports, by = c('dest' = 'faa'))
fl_airport %>%
mutate(mean_toe_delay = mean(total_delay,na.rm=TRUE))
fl_airport%>%
fl_airport%>%
### Continue working on fl_airport data. What is the average arr_delay in
##flights to "Tampa Intl" airport in September? *
fl_airport %>%
mutate(avg_arr_delay = mean(arr_delay))
fl_airport %>%
filter(dest == 'TPA', month == 9)%>%
summarise(mean(arr_delay, na.rm = TRUE))
fl_airport %>%
filter(dest == 'TPA', month == 9)%>%
summarise(mean(arr_delay, na.rm = TRUE))
### Next Question ###
##Continue working on fl_airport data. Which one of the
##following is the airport with largest average arr_delay? *
names(fl_airport)
str(fl_airport$total_delayMean)
fl_airport %>%
group_by(name) %>%
summarise(arr_delay_mean2=mean(arr_delay,na.rm=TRUE)) %>%
arrange(desc(arr_delay_mean2))
fl_airport <-  fl_airport%>%
mutate(arr_delay_mean2= mean(arr_delay, na.rm=TRUE)) %>%
select(arr_delay_mean2)
fl_airport %>%
group_by(name) %>%
summarise(arr_delay_mean2=mean(arr_delay,na.rm=TRUE)) %>%
arrange(desc(arr_delay_mean2))
fl_airport %>%
group_by(name) %>%
summarise(arr_delay_mean2=mean(arr_delay,na.rm=TRUE)) %>%
arrange(desc(arr_delay_mean2))
### Next Question ###
##Continue working on fl_airport data. Which one of the
##following is the airport with largest average arr_delay? *
names(fl_airport)
fl_airport <-  inner_join(fl_new, airports, by = c('dest' = 'faa'))
## Another question
fl_airportMeanTD<- fl_airport %>%
mutate(mean_toe_delay = mean(total_delay,na.rm=TRUE))
fl_airportMeanTD
fl_airportMeanTD %>%
select(mean_toe_delay)
### Continue working on fl_airport data. What is the average arr_delay in
##flights to "Tampa Intl" airport in September? *
fl_airport %>%
mutate(avg_arr_delay = mean(arr_delay))
fl_airport %>%
filter(dest == 'TPA', month == 9)%>%
summarise(mean(arr_delay, na.rm = TRUE))
### Next Question ###
##Continue working on fl_airport data. Which one of the
##following is the airport with largest average arr_delay? *
names(fl_airport)
fl_airport45 <-  fl_airport%>%
mutate(arr_delay_mean2= mean(arr_delay, na.rm=TRUE)) %>%
select(arr_delay_mean2)
fl_airport45
#Hint: First get the airports with at least 10,000 arrivals.
#Then check the mean arrival delay among those airports. *
names(fl_airport)
### Continue working on fl_airport data. What is the average arr_delay in
##flights to "Tampa Intl" airport in September? *
fl_airport %>%
mutate(avg_arr_delay = mean(arr_delay))
fl_airport %>%
filter(dest == 'TPA', month == 9)%>%
summarise(mean(arr_delay, na.rm = TRUE))
fl_new%>%
group_by(carrier)%>%
summarise(total_delay22= mean(arr_delay + dep_delay, na.rm = TRUE))%>%
arrange(total_delay)
fl_new%>%
group_by(carrier)%>%
summarise(total_delay22= mean(arr_delay + dep_delay, na.rm = TRUE))%>%
arrange(total_delay)
fl_new <- flights%>%
mutate(total_delay= dep_delay+arr_delay) %>%
select(month,carrier,origin, dest, distance, total_delay, arr_delay)%>%
mutate(total_delayMean = mean(total_delay, na.rm=TRUE))
fl_new <- flights%>%
mutate(total_delay= dep_delay+arr_delay) %>%
select(month,carrier,origin, dest, distance, total_delay, arr_delay)%>%
mutate(total_delayMean = mean(total_delay, na.rm=TRUE))
fl_new <- flights%>%
mutate(total_delay= dep_delay+arr_delay) %>%
select(month,carrier,origin, dest, distance, total_delay, arr_delay)%>%
mutate(total_delayMean = mean(total_delay, na.rm=TRUE))
#Which of the following carriers has the smallest mean total delay
##in the fl_new data?
fl_new$total_delayMean
airportsName <- sort((airports$name))
airportsName
fl_airport%>% subset(month == '6') %>% filter(dest =='TPA')
fl_airport%>% filter(total_delay > total_delayMean)
## Example #
flights %>%
filter(month==5) %>%
group_by(carrier) %>%
count() %>%
arrange(desc(n))
fl_new%>%
group_by(carrier)%>%
summarise(total_delay22= mean(arr_delay + dep_delay, na.rm = TRUE))%>%
arrange(total_delay)
fl_new%>%
group_by(carrier)%>%
summarise(total_delay22= mean(arr_delay + dep_delay, na.rm = TRUE))%>%
arrange(total_delay22)
select(name, arr_delay, dest, origin)
#Hint: First get the airports with at least 10,000 arrivals.
#Then check the mean arrival delay among those airports. *
names(fl_airport)
fl_airport%>%
select(name, arr_delay, dest, origin)
fl_airport%>%
select(name, arr_delay, dest, origin) %>%
mutate(summarise(meanAvgArr = mean(arr_delay, na.rm = )))
fl_airport%>%
select(name, arr_delay, dest, origin) %>%
mutate(fl_airport, summarise(fl_airport, meanAvgArr = mean(arr_delay, na.rm = )))
fl_airport%>%
select(name, arr_delay, dest, origin) %>%
mutate(fl_airport, summarise( meanAvgArr = mean(arr_delay, na.rm = )))
fl_airport%>%
select(name, arr_delay, dest, origin) %>%
mutate( summarise( meanAvgArr = mean(arr_delay, na.rm = )))
fl_airport%>%
select(name, arr_delay, dest, origin) %>%
mutate( summarise( meanAvgArr = mean(arr_delay, na.rm = TRUE )))
fl_airport%>%
select(name, arr_delay, dest, origin) %>%
filter(dest <= 10000) %>%
count()
?n_distinct
flights %>%
flights %>%
filter(month==5) %>%
group_by(carrier) %>%
count() %>%
arrange(desc(n))
flights %>%
filter(month==5) %>%
group_by(carrier) %>%
count() %>%
arrange(desc(n))
flights %>%
group_by(carrier) %>%
count() %>%
filter(month==5) %>%
arrange(desc(n))
fl_airport%>%
filter(n_distinct(na.rm=TRUE, dest))
fl_airport%>%
filter(dest < 10000) %>%
group_by(name)
fl_airport%>%
filter(unique(dest < 10000))%>%
group_by(name)
summarise(dest)
filter(summarise_each(n()dest < 10000)
fl_airport%>%
group_by(name) %>%
filter(summarise_each(n()dest < 10000))
fl_airport%>%
group_by(name) %>%
filter(summarise(n()dest < 10000))
fl_airport%>%
group_by(name) %>%
filter(summarise(n())dest < 10000)
fl_airport%>%
group_by(name) %>%
filter(summarise(n()dest < 10000))
fl_airport%>%
group_by(name) %>%
filter(n_distinct(dest) < 10000)
fl_airport%>%
group_by(name) %>%
filter(n_distinct(dest) < 50)
fl_airport%>%
group_by(name) %>%
filter(n(dest) < 50)
fl_airport%>%
group_by(name) %>%
filter(n(dest) <= 50)
fl_airport%>%
group_by(name) %>%
filter( n_groups (dest) <= 50)
fl_airport%>%
group_by(name) %>%
filter( n_distinct (dest,na.rm = TRUE) <= 50)
fl_airport%>%
group_by(name) %>%
filter( n_distinct (dest,na.rm = TRUE) <= 50000)
fl_airport%>%
group_by(name) %>%
filter( n_distinct (dest,na.rm = TRUE) >= 50000)
fl_airport%>%
group_by(name) %>%
filter( n_distinct (dest,na.rm = TRUE) >= 5000)
fl_airport%>%
group_by(name) %>%
filter( n_distinct (dest,na.rm = TRUE) >= 5)
a
#### Hw 2 Stuff####
13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70-> a
#### Hw 2 Stuff####
c(13, 15, 16, 16, 19, 20, 20, 21, 22, 22, 25, 25, 25, 25, 30, 33, 33, 35, 35, 35, 35, 36, 40, 45, 46, 52, 70)-> a
a
mean(a)
median(a)
mode(a)
as.factor(a)
a
as.factor(a)
aFactor <- as.factor(a)
median(aFactor)
a
ggplot(a, aes(x=a) + geom_histogram())
library(ggplot2)
## Week 6 Attempt 2 with Quizzes and Assignments
library(flights)
library(nycflights13)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(dbplyr)
ggplot(a, aes(x=a) + geom_histogram())
ggplot(a, aes(x=a)) + geom_histogram())
ggplot(a, aes(x=a)) + geom_histogram()
x <- seq(-5,5, 0.1)
x
y <- x^2
y
y <- (x^2)
y
cor(x,y)
print(cor(x,y))
print.warnings(cor(x,y))
?plot
plot(x,y)
plot(y,x)
ggplot(y, (aes(x= "Lmao")+ geom_point(y))
ggplot(y, (aes(x= "Lmao")+ geom_point(y)))
plot(x,y)
cor(y,x)
x <- seq(-5,5, 0.1)
y <- (x^2)
x
y
x
x
correlation is a single number that describes the degree of relationship between two variablesp
x
y
print(25.00 24.01 23.04 22.09 21.16 20.25 19.36 18.49 17.64 16.81 16.00 15.21 14.44 13.69 12.96 12.25 11.56 10.89 10.24  9.61  9.00  8.41  7.84  7.29  6.76  6.25  5.76  5.29  4.84  4.41  4.00  3.61  3.24  2.89  2.56  2.25  1.96  1.69  1.44  1.21  1.00  0.81 0.64  0.49  0.36  0.25  0.16  0.09  0.04  0.01  0.00  0.01  0.04  0.09  0.16  0.25  0.36  0.49  0.64  0.81  1.00  1.21  1.44 1.69  1.96  2.25  2.56  2.89  3.24  3.61  4.00  4.41  4.84  5.29  5.76  6.25  6.76  7.29  7.84  8.41  9.00  9.61 10.24 10.89 11.56 12.25 12.96 13.69 14.44 15.21 16.00 16.81 17.64 18.49 19.36 20.25 21.16 22.09 23.04 24.01 25.00
> )
print(25.00 24.01 23.04 22.09 21.16 20.25 19.36 18.49 17.64 16.81 16.00 15.21 14.44 13.69 12.96 12.25 11.56 10.89 10.24  9.61  9.00  8.41  7.84  7.29  6.76  6.25  5.76  5.29  4.84  4.41  4.00  3.61  3.24  2.89  2.56  2.25  1.96  1.69  1.44  1.21  1.00  0.81 0.64  0.49  0.36  0.25  0.16  0.09  0.04  0.01  0.00  0.01  0.04  0.09  0.16  0.25  0.36  0.49  0.64  0.81  1.00  1.21  1.44 1.69  1.96  2.25  2.56  2.89  3.24  3.61  4.00  4.41  4.84  5.29  5.76  6.25  6.76  7.29  7.84  8.41  9.00  9.61 10.24 10.89 11.56 12.25 12.96 13.69 14.44 15.21 16.00 16.81 17.64 18.49 19.36 20.25 21.16 22.09 23.04 24.01 25.00
)
plot(x,y)
plot(y,x)
plot(x,y)
# Subsetting hopefully ##
library(dplyr)
library(nycflights13)
# Select() the only cols you need
select(flights, carrier, dep_delay)
select(flights, carrier, dep_delay)
uhhS2 <- select(flights, carrier, dep_delay)
filter(df, carrier)
filter(uhhS2, carrier)
filter(uhhS2, carrier=='UA')
mean(filter(uhhS2, carrier=='UA'))
mean(filter(uhhS2, carrier=='UA'), na.rm=TRUE)
filthy <- filter(uhhS2, carrier=='UA')
mean(filthy$dep_delay)
mean(filthy$dep_delay,na.rm=TRUE)
mean(filter(flights, dep_delay), na.rm = TRUE)
# Subsetting hopefully ##
library(dplyr)
library(nycflights13)
# Select() the only cols you need
select(flights, carrier, dep_delay)
uhhS2 <- select(flights, carrier, dep_delay)
filthy <- filter(uhhS2, carrier=='UA')
# below is mean for departure delay with UA
mean(filthy$dep_delay,na.rm=TRUE)
mean(filter(flights, dep_delay), na.rm = TRUE)
mean(filter(flights$dep_delay), na.rm = TRUE)
mean(flights$dep_delay, na.rm = TRUE)
notUA <- filter(flights, carrier!='UA', dep_delay)
notUA
mean(notUA)
mean(notUA, na.rm=TRUE)
mean(notUA$dep_delay, na.rm=TRUE)
library('nycflights13')
library('flights')
library('nycflights13')
library('flights')
install.packages('flights')
# Subsetting hopefully ##
library(dplyr)
library(nycflights13)
# Select() the only cols you need
select(flights, carrier, dep_delay)
uhhS2 <- select(flights, carrier, dep_delay)
filthy <- filter(uhhS2, carrier=='UA')
# below is mean for departure delay with UA
mean(filthy$dep_delay,na.rm=TRUE)
## Avg delay for whole data set
mean(flights$dep_delay, na.rm = TRUE)
##This filter excludes UA but it it is the data set that
##    contains no UA Or dep_delay
notUA <- filter(flights, carrier!='UA', dep_delay)
mean(notUA$dep_delay, na.rm=TRUE)
mean(notUA$dep_delay, na.rm=TRUE)
##This filter excludes UA but it it is the data set that
##    contains no UA Or dep_delay
notUA <- filter(flights, carrier!='UA')
mean(notUA$dep_delay, na.rm=TRUE)
#Filtering two things so UA and AA
filter(carrier== 'UA', carrier='AA')
#Filtering two things so UA and AA
filter(flights,carrier== 'UA', carrier='AA')
#Filtering two things so UA and AA
filter(flights,carrier== 'UA', 'AA')
#Filtering two things so UA and AA
filter(flights, carrier== 'UA', 'AA')
#Filtering two things so UA and AA
filter(filthy, carrier== 'UA', 'AA')
#Filtering two things so UA and AA
filter(filthy, carrier== c('UA', 'AA'))
#Filtering two things so UA and AA
twoFilter <- filter(filthy, carrier== c('UA', 'AA'))
mean(twoFilter$dep_delay, na.rm=TRUE)
twoFilter2 <- filter(flights, carrier %in% c('UA', 'AA'))
mean(twoFilter2$dep_delay, na.rm=TRUE)
## To check the uniqueness use the unique function
unique(twoFilter$carrier)
unique(twoFilter2$carrier)
# finding the carrier with the largest dep delay
max(flights$dep_delay, na.rm=TRUE)
# finding the carrier with the largest dep delay
max(flights$dep_delay, na.rm=TRUE)
rowIndex <- which.max(flights$dep_delay)
rowIndex
flights[rowIndex]
flights[rowIndex, 4]
flights[rowIndex, 3]
flights[rowIndex, 10]
flights[rowIndex, 'carrier']
df2 <-flights%>%
select(carrier, dep_delay, arr_delay, air_time, distance) %>%
mutate(total_delay = dep_delay + arr_delay, speed = air_time / distance *60)
df2
df2 <-flights%>%
select(carrier, dep_delay, arr_delay, air_time, distance) %>%
mutate(total_delay = dep_delay + arr_delay, speed = (air_time / distance) *60)
df2
## Group by and finding means
df2 %>% group_by(carriers) %>% summarise(mean(total_delay, na.rm=TRUE))
## Group by and finding means
df2 %>% group_by(carrier) %>% summarise(mean(total_delay, na.rm=TRUE))
df = read.table('auto-mpg.data', header = FALSE)
